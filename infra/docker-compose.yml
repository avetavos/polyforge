name: polyforge-infrastructure
services:
  order_database:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${ORDER_DB_USER}
      POSTGRES_PASSWORD: ${ORDER_DB_PASSWORD}
      POSTGRES_DB: ${ORDER_DB_NAME}
    ports:
      - "${ORDER_DB_PORT}:5432"
    volumes:
      - order_data:/var/lib/postgresql/data

  inventory_database:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${INVENTORY_DB_USER}
      POSTGRES_PASSWORD: ${INVENTORY_DB_PASSWORD}
      POSTGRES_DB: ${INVENTORY_DB_NAME}
    ports:
      - "${INVENTORY_DB_PORT}:5432"
    volumes:
      - inventory_data:/var/lib/postgresql/data

  catalog_database:
    image: mongo:8.0
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${CATALOG_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${CATALOG_DB_PASSWORD}
    ports: 
      - "${CATALOG_DB_PORT}:27017"
    volumes:
      - catalog_data:/data/db

  recommendation_database:
    image: mongo:8.0
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${RECOMMENDATION_DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${RECOMMENDATION_DB_PASSWORD}
    ports: 
      - "${RECOMMENDATION_DB_PORT}:27017"
    volumes:
      - recommendation_data:/data/db

  redis:
    image: redis:7
    ports: 
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"

  kong-database:
    image: postgres:15
    environment:
      POSTGRES_USER: ${KONG_DB_USER}
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD}
      POSTGRES_DB: ${KONG_DB_NAME}
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KONG_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:latest
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
    depends_on:
      kong-database:
        condition: service_healthy
    restart: "no"

  kong:
    image: polyforge-kong:1.0
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_LOG_LEVEL: warn
      KONG_PLUGINS: "bundled,oidc,roles-checker"
    ports:
      - "${KONG_PORT}:8000"
      - "${KONG_ADMIN_PORT}:8001"
      - "8443:8443"
      - "8444:8444"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully

  inventory-service:
    image: polyforge-inventory:1.0
    depends_on: [inventory_database, rabbitmq, redis]

  recommendation-service:
    image: polyforge-recommendation:1.0
    depends_on: [recommendation_database, rabbitmq, redis]

  catalog-service:
    image: polyforge-catalog:1.0
    depends_on: [catalog_database, rabbitmq, redis]

  order-service:
    image: polyforge-order:1.0
    depends_on: [order_database, rabbitmq, redis]

volumes:
  order_data:
  catalog_data:
  inventory_data:
  recommendation_data:
  redis_data:
  zookeeper_data:
  kafka_data:
  kong_data:

